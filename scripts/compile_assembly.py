#!/usr/bin/env python3
# scripts/compile_assembly.py
#
# Copyright (c) 2025 Igor Bogdanov
# All rights reserved.

"""
This script manually compiles the assembly files (.S) generated by riscv-dv
into the ELF files (.elf) required for simulation. This is necessary because
the 'riscv_compile' step within the main 'run.py' script is failing, likely
due to a misconfigured toolchain path.
"""

import sys
import os
import subprocess
import glob
from pathlib import Path


def find_output_directory():
    """Find the output directory (assumes only one 'out_*' directory exists)"""
    out_dirs = glob.glob("out_*/")
    if not out_dirs:
        print(
            "Error: Output directory (out_*) not found. Did 'make gen' run successfully?",
            file=sys.stderr,
        )
        sys.exit(1)
    return out_dirs[0]


def check_linker_script():
    """Check if the linker script exists"""
    linker_script = "uvm_env/custom_target/rv32i/link.ld"
    if not os.path.exists(linker_script):
        print(f"Error: Linker script not found at {linker_script}", file=sys.stderr)
        sys.exit(1)
    return linker_script


def compile_assembly_files(out_dir, linker_script):
    """Compile all assembly files in the output directory"""
    # Use environment variables if set, otherwise use defaults
    riscv_prefix = os.environ.get("RISCV_PREFIX", "riscv64-unknown-elf")
    target_arch = os.environ.get("TARGET_ARCH", "rv32i_zicsr")
    target_abi = os.environ.get("TARGET_ABI", "ilp32")

    cc = f"{riscv_prefix}-gcc"

    # Build compiler flags
    includes = "-Iuvm_env/riscv-dv/src -Iuvm_env/riscv-dv/user_extension"
    cflags = [
        f"-march={target_arch}",
        f"-mabi={target_abi}",
        "-static",
        "-mcmodel=medany",
        "-fvisibility=hidden",
        "-nostdlib",
        "-nostartfiles",
        "-mno-relax",
    ] + includes.split()

    asm_dir = os.path.join(out_dir, "asm_test")
    if not os.path.exists(asm_dir):
        print(f"Error: Assembly test directory ({asm_dir}) not found.", file=sys.stderr)
        sys.exit(1)

    # Find all assembly files
    asm_files = glob.glob(os.path.join(asm_dir, "*.S"))
    if not asm_files:
        print(f"Warning: No assembly files found in {asm_dir}", file=sys.stderr)
        return

    # Compile each assembly file
    for asm_file in asm_files:
        # The riscv-dv script expects a '.o' extension, even though it's a fully linked ELF file
        elf_file = asm_file.replace(".S", ".o")
        print(f"Compiling {asm_file} -> {elf_file}")

        # Build the compilation command
        cmd_args = [cc] + cflags + ["-T", linker_script, "-o", elf_file, asm_file]

        try:
            result = subprocess.run(
                cmd_args, check=True, capture_output=True, text=True
            )
        except subprocess.CalledProcessError as e:
            print(f"Error compiling {asm_file}: {e}", file=sys.stderr)
            if e.stderr:
                print(f"Compiler stderr: {e.stderr}", file=sys.stderr)
            sys.exit(1)
        except FileNotFoundError:
            print(
                f"Error: '{cc}' command not found. Is the RISC-V toolchain installed and in PATH?",
                file=sys.stderr,
            )
            sys.exit(1)


def main():
    print("--- Compiling assembly tests to ELF files ---")

    # Find the output directory
    out_dir = find_output_directory()

    # Check if the linker script exists
    linker_script = check_linker_script()

    # Compile all assembly files
    compile_assembly_files(out_dir, linker_script)

    print("--- Compilation complete ---")


if __name__ == "__main__":
    main()
