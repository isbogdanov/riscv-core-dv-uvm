#!/bin/bash
# scripts/compile_assembly.sh

# This script manually compiles the assembly files (.S) generated by riscv-dv
# into the ELF files (.elf) required for simulation. This is necessary because
# the 'riscv_compile' step within the main 'run.py' script is failing, likely
# due to a misconfigured toolchain path.

set -e # Exit on any error

# --- Configuration ---
# The RISC-V toolchain prefix. This must be in your system's PATH.
RISCV_PREFIX="riscv64-unknown-elf"
CC="${RISCV_PREFIX}-gcc"

# Compiler flags must match the target architecture.
# The 'zicsr' extension is required for the CSR instructions used in the test harness.
ISA="rv32im_zicsr"
ABI="ilp32"
# The compiler needs two include paths:
# 1. The core riscv-dv environment for standard headers.
# 2. The user_extension directory for project-specific headers.
INCLUDES="-Iuvm_env/riscv-dv/src -Iuvm_env/riscv-dv/user_extension"
# These flags create a baremetal ELF file suitable for simulation.
CFLAGS="-march=${ISA} -mabi=${ABI} ${INCLUDES} -static -mcmodel=medany -fvisibility=hidden -nostdlib -nostartfiles -mno-relax"

# --- Script Body ---
echo "--- Compiling assembly tests to ELF files ---"

# Find the output directory (assumes only one 'out_*' directory exists)
OUT_DIR=$(ls -d out_*/ 2>/dev/null | head -n 1)
if [ -z "$OUT_DIR" ]; then
    echo "Error: Output directory (out_*) not found. Did 'make gen' run successfully?"
    exit 1
fi

ASM_DIR="${OUT_DIR}asm_test"
if [ ! -d "$ASM_DIR" ]; then
    echo "Error: Assembly test directory (${ASM_DIR}) not found."
    exit 1
fi

# Find the linker script provided by riscv-dv for this target.
LINKER_SCRIPT="uvm_env/riscv-dv/target/amd_sprint_no_c/link.ld"
if [ ! -f "$LINKER_SCRIPT" ]; then
    echo "Error: Linker script not found at ${LINKER_SCRIPT}"
    exit 1
fi

# Loop through all generated assembly files and compile them
find "$ASM_DIR" -name "*.S" | while read -r asm_file; do
    # The riscv-dv script expects a '.o' extension, even though it's a fully linked ELF file.
    elf_file="${asm_file%.S}.o"
    echo "Compiling ${asm_file} -> ${elf_file}"
    "$CC" $CFLAGS -T "$LINKER_SCRIPT" -o "$elf_file" "$asm_file"
done

echo "--- Compilation complete ---" 